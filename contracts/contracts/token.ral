Contract BurnConvert(
   tokenIdBurn: ByteVec,
   tokenIdConvert: ByteVec,
   mut balanceConvert: U256
){

   enum ErrorCodes {
      NotEnoughFundsContract = 0
   }

   @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
   pub fn deposit(amount: U256) -> (){
      let caller = callerAddress!()

      balanceConvert = balanceConvert + amount
      transferTokenToSelf!(caller, tokenIdConvert, amount)
   }

   @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
   pub fn burnAndConvert(amountToBurn: U256) -> (){
      let caller = callerAddress!()
      assert!(balanceConvert >= amountToBurn, ErrorCodes.NotEnoughFundsContract)
      
      balanceConvert = balanceConvert - amountToBurn
      burnToken!(caller, tokenIdBurn, amountToBurn)
      transferTokenFromSelf!(caller, tokenIdConvert, amountToBurn)
   }
}